		//класс Маршрутка
	public class ShuttleBus{											
	 
		private Driver driver;
	 
		private List<Passanger> pass;
	 
		private Map<String, Stop> stops;
	 
		private int capasity, fuel;
		
		private Boolean isStopped, isForvardDoorOpened, isRearDoorOpened;
		
		//пассажир зашел в маршрутку
		public void addPassanger(Passanger passanger){					
			
			pass.add(passanger);
			
		}
		
		//пассажир вышел из маршрутки, и испортил настроение водителю, если не заплатил
		public void deletePassanger(Passanger passanger) {				
		
			if(passanger.getHaveMoney() == false) driver.mood = DriversMood.ANGRY;
			
			pass.remove(passanger);
		
		}
		
		// заказ остановки	
		public void orderBusStop(String stopName){
		
			stops.get(stopName).setIsRequired(true);
		
		}
		
		//getters and setters
		public void setIsForvardDoorOpened(Boolean a) { isForvardDoorOpened = a; }
		
		public Boolean getIsForvardDoorOpened() {return isForvardDoorOpened; }
		
		public void setIsRearDoorOpened(Boolean a) { isRearDoorOpened = a; }
		
		public Boolean getIsRearDoorOpened() {return isRearDoorOpened; }
		
		public void setIsStopped(Boolean a) { isStopped = a; }
		
		public Boolean getIsStopped() {return isStopped; }
	 }
	 
		//класс Водитель
	public class Driver{
	 
		private DriversMood mood;
	 
		private Boolean isOnBoard;
		
		private ShuttleBus bus;
		
		// Поехали!!!
		public void ride(){
			
			if(isOnBoard){
				
				bus.setIsForvardDoorOpened(false);
				
				bus.setIsRearDoorOpened(false);
				
				bus.setIsStopped(false);
				 
			}
			
		}
		
		// остановить маршрутку на остановке	
		public void stopAtTheBusStop(){
			
			bus.setIsStopped(true);
		
		// если водитель в плохом настроении он не открывает заднюю дверь	
			if(mood == DriversMood.GOOD){
				
				 bus.setIsForvardDoorOpened(true);
				 
				 bus.getIsRearDoorOpened(true);
				 
			 }
			 
			else  bus.setIsForvardDoorOpened(true);
				
		}
		
		//остановить маршрутку
		public void stop(){
			
			bus.setIsStopped(true);
		
		}
		
		// при подъезде к очередной остановке
		public void onTheStopIsApproachingEvent(SomeEvent e){
		
			Boolean stopIsReqired = bus.stops.get(e.getNextStopName()).getIsRequired;
			Boolean stopHasPassangers = bus.stops.get(e.getNextStopName()).getHasPassangers;
			 
			if(stopIsReqired || stopHasPassangers ) stopAtTheBusStop();
			
		}
		
		
	 // getters and setters
	 
	 }
	
	// перечисление настроений водителя 
	enum DriversMood {BAD, GOOD}
	
	// класс Пассажир
	public class Passanger{
		
		private int id;
		
		private String requiredStop;
		
		private Boolean haveMoney, isOnBoard;
		
		private ShuttleBus bus;
		
		//пассажир заказывает нужную остановку
		public void orderBusStop(){
			
			if(haveMoney) bus.orderBusStop(requiredStop);
		
			else return;
			
		}
		
		//пассажир заходит в маршрутку, или выходит из нее
		public void onBusStoppedEvent(Event e){
			
			if(requiredStop == e.getStopName()){
			
				if(isOnBoard == true){
			
					isOnBoard = false;
			 
					bus.deletePassanger(this);
			
				}
				
				else{
				
					isOnBoard = true;
			
					bus.addPassanger(this);
					
				}
			}	
		}
		
		// getters and setters
		public void setHaveMoney(Boolean a) { haveMoney = a;}
		
		public Boolean getHaveMoney() { return haveMoney; }
		
		public void setIsOnBoard(Boolean a) { isOnBoard = a;}
		
		public Boolean getIsOnBoard() { return isOnBoard; }
		
		public void setRequiredStop(Boolean a) { requiredStop = a;}
		
		public Boolean getRequiredStop() { return requiredStop; }
	
	
	}
	
	// класс Остановка
	public class Stop{
		
		private String name;
		
		private Boolean isRequired, hasPassangers;
	
	
		//getters and setters
		
		public void setIsRequired(Boolean a) { isRequired = a; }
		
		public Boolean getIsRequired() { return isRequired; }
		
		public void setName(String name) { this.name = name; }
		
		public String getName() { return name; }
		
		public void setHasPassangers(Boolean a) { hasPassangers = a; }
		
		public Boolean getHasPassangers() { return hasPassangers; }
	}
